            - name: Git Semantic Version
  # You may pin to the exact commit or the version.
  # uses: PaulHatch/semantic-version@a8f8f59fd7f0625188492e945240f12d7ad2dca3
  uses: PaulHatch/semantic-version@v5.4.0
  with:
    # Set to specify a specific branch, default is the current HEAD
    branch: # default is HEAD
    # The prefix to use to identify tags
    tag_prefix: # optional, default is v
    # (Deprecated) Use branches instead of tags
    use_branches: # optional, default is false
    # If true, the branch will be used to select the maximum version
    version_from_branch: # optional, default is false
    # A string which, if present in a git commit, indicates that a change represents a major (breaking) change. Wrap with '/' to match using a regular expression.
    major_pattern: # default is (MAJOR)
    # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
    major_regexp_flags: # optional, default is 
    # A string which, if present in a git commit, indicates that a change represents a minor (feature) change. Wrap with '/' to match using a regular expression.
    minor_pattern: # default is (MINOR)
    # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
    minor_regexp_flags: # optional, default is 
    # Pattern to use when formatting output version
    version_format: # default is ${major}.${minor}.${patch}
    # Path to check for changes. If any changes are detected in the path the 'changed' output will true. Enter multiple paths separated by spaces.
    change_path: # optional
    # Use to create a named sub-version. This value will be appended to tags created for this version.
    namespace: # optional
    # If true, every commit will be treated as a bump to the version.
    bump_each_commit: # default is false
    # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
    search_commit_body: # default is false
    # The output method used to generate list of users, 'csv' or 'json'. Default is 'csv'.
    user_format_type: # default is csv
    # Prevents pre-v1.0.0 version from automatically incrementing the major version. If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
    enable_prerelease_mode: # default is false
    # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
    bump_each_commit_patch_pattern: # default is 
    # If enabled, diagnostic information will be added to the action output
    debug: # default is false
    
name: Semantic Versioning

on:
  push:
    branches:
      - master
      - develop
      - "release/*"

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository with full history
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required to include full Git history and tags

      # Generate semantic version
      - name: Git Semantic Version
        id: version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v" # Prefix for tags (e.g., v1.2.3)
          major_pattern: "(MAJOR)" # Pattern in commit messages for major version bumps
          minor_pattern: "(MINOR)" # Pattern for minor version bumps
          patch_pattern: "(PATCH)" # Pattern for patch version bumps
          version_format: "${major}.${minor}.${patch}" # Version format
          change_path: "src/" # Optional: Path to check for changes
          namespace: "" # Optional: For named sub-versions
          bump_each_commit: false # If true, every commit increments the version
          search_commit_body: false # If true, searches commit body for patterns
          user_format_type: "csv" # Output format for users (csv or json)

      # Example: Print the generated version
      - name: Print Version
        run: |
          echo "Generated Version: ${{ steps.version.outputs.version }}"
          echo "Major: ${{ steps.version.outputs.major }}"
          echo "Minor: ${{ steps.version.outputs.minor }}"
          echo "Patch: ${{ steps.version.outputs.patch }}"
